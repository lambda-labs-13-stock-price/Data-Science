# This is a configuration script for automatically deploying the Task Scheduling API to AWS Lambda.
# In the process of doing this:
#   - An APIGateway is created and configured to take JSON from a HTTP POST request
#   - An AWS Lambda function is created using a zipfile uploaded to an S3 bucket

AWSTemplateFormatVersion: '2010-09-09'
Description: Task Scheduling API

Parameters:
  QueueURL:
    Type: String
    Description: AWS SQS Queue URL
  Region:
    Type: String
    Description: AWS Region where SQS Queue is located

  S3Bucket:
    Type: String
    Description: Bucket containing the lambda function zipfile
  S3Key:
    Type: String
    Description: Path to your lambda function zipfile
  S3ZipFile:
    Type: String
    Description: Name of the lambda function zipfile
  S3Role:
    Type: String
    Description: Execution role of the lambda function

Resources:
  Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: task-scheduler
      Resource: lambda.handler
      Role: !Ref S3Role
      Runtime: ruby2.5
      Code:
        S3Key: !Ref S3Key
        S3Bucket: !Ref S3Bucket
        ZipFile: !Ref S3ZipFile
      Environment:
        Variables:
          AWS_SQS_URL: !Ref QueueURL
          AWS_REGION_CODE: !Ref Region

  API:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Task Scheduling API
      FailOnWarnings: true

  FunctionInvocationPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt [Function, Arn]
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - "arn:aws:execute-api:"
        - !Ref AWS::Region
        - ":"
        - !Ref AWS::AccountId
        - ":"
        - !Ref API
        - "/*"

  POST:
    Type: AWS::ApiGateway::Method
    DependsOn:
      - FunctionInvocationPermissions
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref Route
      RestApiId: !Ref API
      MethodResponses:
        StatusCode: 200
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Join
          - "arn:aws:apigateway:"
          - !Ref AWS::Region
          - ":lambda:path/2015-03-31/functions/"
          - !GetAtt [Function, Arn]
          - "/invocations"
        IntegrationResponses:
          StatusCode: 200

  Proxy:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - POST
    Properties:
      RestApiId: !Ref API
      StageName: "testing"

  Route:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref API
      ParentId: !GetAtt [API, RootResourceId]
      PathPart: "/"

  Middleware:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref Proxy
      MethodSettings:
        HttpMethod: "*"
        LoggingLevel: INFO
        ResourcePath: "/*"
      ResourcePath: !Ref Route
      StageName: LATEST

Outputs:
  FunctionArn:
    Value: !GetAtt [Function, Arn]
  APIGatewayURL:
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${Middleware}"
